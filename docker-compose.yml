version: "3"
services:

  database:
    image: postgres:14.5
    container_name: db_vernissage
    hostname: db_vernissage_host
    networks:
      - my-net
    environment:
      - POSTGRES_PASSWORD=1
      - POSTGRES_USER=postgres
    volumes:
      - pg_clinical_trials:/var/lib/postgresql/data
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433

  backend1:
    depends_on:
      - database
    hostname: backend1
    build:
      dockerfile: Dockerfile.bk
    networks:
      - my-net
    ports:
      - "8081:8080"

  backend2:
    depends_on:
      - database
    hostname: backend1
    build:
      dockerfile: Dockerfile.bk
    networks:
      - my-net
    ports:
      - "8082:8080"

  servlet-api-gw:
    depends_on:
      - database
      - backend1
      - backend2
    hostname: gateway
    build:
      dockerfile: Dockerfile.gwsr
    networks:
      - my-net
    ports:
      - "8083:8080"

  # gateway:
  #   depends_on:
  #     - database
  #     - backend1
  #   hostname: gateway
  #   build:
  #     dockerfile: Dockerfile.gw
  #   networks:
  #     - my-net
  #   ports:
  #     - "8083:8080"

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml

  # # Optional Grafana service if you want to visualize metrics
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana

#  backend2:
#    #    image: garrri/testing_system_backend:latest
#    depends_on:
#      - database
##      - kafka
#    hostname: backend2
#    build:
#      dockerfile: Dockerfile.bk
#    #    environment:
#    #      - SPRING_RABBITMQ_HOST=my-rabbit
#    networks:
#      - my-net
#    ports:
#      - "8082:8080"


#  zookeeper:
#    image: confluentinc/cp-zookeeper:6.2.0
#    hostname: zookeeper
#    container_name: zookeeper
#    ports:
#      - "22181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  kafka:
#    image: confluentinc/cp-kafka:6.2.0
#    hostname: kafka
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "29092:29092"
#      - "9092:9092"
#      - "9101:9101"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_JMX_PORT: 9101
#      KAFKA_JMX_HOSTNAME: localhost

#  kafdrop:
#    image: obsidiandynamics/kafdrop
#    restart: "no"
#    ports:
#      - "9007:9000"
#    environment:
#      KAFKA_BROKERCONNECT: "kafka:29092"
#      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
#    depends_on:
#      - "kafka"

volumes:
  pg_clinical_trials:
  grafana-storage:

networks:
  my-net:
    driver: bridge